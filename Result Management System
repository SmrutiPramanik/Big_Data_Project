# Install required dependencies before running:
!pip install faker findspark pyspark plotly pandas

# Import all modules used
import random
import json
from faker import Faker
import findspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import mean, max, min, count
import plotly.express as px
import pandas as pd
from google.colab import files
import os

# Now that findspark and pyspark are installed, initialize findspark
findspark.init()

# Rest of the code remains the same
fake = Faker()

SUBJECTS = ["Electronics", "Programming", "Database", "Data Science", "Mathematics", "DSA"]
NUM_STUDENTS = 10000

def generate_students():
    students = []
    for i in range(1, NUM_STUDENTS + 1):
        student_id = f"S{i:05d}"
        name = fake.name()
        marks = {subject: random.randint(35, 100) for subject in SUBJECTS}
        students.append({"id": student_id, "name": name, "marks": marks})
    return students

def save_to_json(data, filename):
    with open(filename, "w") as f:
        json.dump(data, f)
    files.download(filename)  # Allows download in Colab

def process_with_spark():
    spark = SparkSession.builder.master("local[*]").appName("ResultManagement").getOrCreate()
    df = spark.read.json("students.json")
    df = df.select("id", "name", "marks.*")
    
    stats = df.agg(
        mean("Electronics").alias("avg_electronics"),
        mean("Programming").alias("avg_programming"),
        mean("Database").alias("avg_database"),
        mean("Data Science").alias("avg_datascience"),
        mean("Mathematics").alias("avg_mathematics"),
        mean("DSA").alias("avg_dsa"),
        max("Electronics").alias("max_electronics"),
        min("Electronics").alias("min_electronics"),
        count("id").alias("total_students")
    )
    
    stats_df = stats.toPandas()
    spark.stop()
    return stats_df

def visualize_results(stats_df):
    stats_df = stats_df.melt(var_name='Subject', value_name='Value')
    fig = px.bar(stats_df, x='Subject', y='Value', title="Subject Statistics", text='Value')
    fig.show()

if __name__ == "__main__":
    students_data = generate_students()
    save_to_json(students_data, "students.json")
    print("Student data generated and saved to students.json")
    
    stats_df = process_with_spark()
    visualize_results(stats_df)
